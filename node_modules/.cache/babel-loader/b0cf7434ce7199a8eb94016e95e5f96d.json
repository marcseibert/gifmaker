{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar ndarray = require('ndarray');\n\nvar GifReader = require('omggif').GifReader;\n\nvar pack = require('ndarray-pack');\n\nvar through = require('through');\n\nvar parseDataURI = require('data-uri-to-buffer');\n\nfunction defaultImage(url, cb) {\n  var img = new Image();\n  img.crossOrigin = \"Anonymous\";\n\n  img.onload = function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    var context = canvas.getContext('2d');\n    context.drawImage(img, 0, 0);\n    var pixels = context.getImageData(0, 0, img.width, img.height);\n    cb(null, ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4 * img.width, 1], 0));\n  };\n\n  img.onerror = function (err) {\n    cb(err);\n  };\n\n  img.src = url;\n} //Animated gif loading\n\n\nfunction handleGif(data, cb) {\n  var reader;\n\n  try {\n    reader = new GifReader(data);\n  } catch (err) {\n    cb(err);\n    return;\n  }\n\n  if (reader.numFrames() > 0) {\n    var framesInfo = [];\n    var nshape = [reader.numFrames(), reader.height, reader.width, 4];\n    var ndata = new Uint8Array(nshape[0] * nshape[1] * nshape[2] * nshape[3]);\n    var result = ndarray(ndata, nshape);\n\n    try {\n      for (var i = 0; i < reader.numFrames(); ++i) {\n        reader.decodeAndBlitFrameRGBA(i, ndata.subarray(result.index(i, 0, 0, 0), result.index(i + 1, 0, 0, 0)));\n        framesInfo.push(reader.frameInfo(i));\n      }\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, result.transpose(0, 2, 1), framesInfo);\n  } else {\n    var nshape = [reader.height, reader.width, 4];\n    var ndata = new Uint8Array(nshape[0] * nshape[1] * nshape[2]);\n    var result = ndarray(ndata, nshape);\n\n    try {\n      reader.decodeAndBlitFrameRGBA(0, ndata);\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, result.transpose(1, 0));\n  }\n}\n\nfunction httpGif(url, cb) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', url, true);\n  xhr.responseType = 'arraybuffer';\n\n  if (xhr.overrideMimeType) {\n    xhr.overrideMimeType('application/binary');\n  }\n\n  xhr.onerror = function (err) {\n    cb(err);\n  };\n\n  xhr.onload = function () {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    var data = new Uint8Array(xhr.response);\n    handleGif(data, cb);\n    return;\n  };\n\n  xhr.send();\n}\n\nfunction copyBuffer(buffer) {\n  if (buffer[0] === undefined) {\n    var n = buffer.length;\n    var result = new Uint8Array(n);\n\n    for (var i = 0; i < n; ++i) {\n      result[i] = buffer.get(i);\n    }\n\n    return result;\n  } else {\n    return new Uint8Array(buffer);\n  }\n}\n\nfunction dataGif(url, cb) {\n  process.nextTick(function () {\n    try {\n      var buffer = parseDataURI(url);\n\n      if (buffer) {\n        handleGif(copyBuffer(buffer), cb);\n      } else {\n        cb(new Error('Error parsing data URI'));\n      }\n    } catch (err) {\n      cb(err);\n    }\n  });\n}\n\nmodule.exports = function getPixels(url, type, cb) {\n  if (!cb) {\n    cb = type;\n    type = '';\n  }\n\n  var ext = path.extname(url);\n\n  switch (type || ext.toUpperCase()) {\n    case '.GIF':\n      httpGif(url, cb);\n      break;\n\n    default:\n      if (Buffer.isBuffer(url)) {\n        url = 'data:' + type + ';base64,' + url.toString('base64');\n      }\n\n      if (url.indexOf('data:image/gif;') === 0) {\n        dataGif(url, cb);\n      } else {\n        defaultImage(url, cb);\n      }\n\n  }\n};","map":null,"metadata":{},"sourceType":"script"}