{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar Stream = require('stream');\n\nvar constants = require('./constants');\n\nvar Packer = require('./packer');\n\nvar PackerAsync = module.exports = function (opt) {\n  Stream.call(this);\n  var options = opt || {};\n  this._packer = new Packer(options);\n  this._deflate = this._packer.createDeflate();\n  this.readable = true;\n};\n\nutil.inherits(PackerAsync, Stream);\n\nPackerAsync.prototype.pack = function (data, width, height, gamma) {\n  // Signature\n  this.emit('data', new Buffer(constants.PNG_SIGNATURE));\n  this.emit('data', this._packer.packIHDR(width, height));\n\n  if (gamma) {\n    this.emit('data', this._packer.packGAMA(gamma));\n  }\n\n  var filteredData = this._packer.filterData(data, width, height); // compress it\n\n\n  this._deflate.on('error', this.emit.bind(this, 'error'));\n\n  this._deflate.on('data', function (compressedData) {\n    this.emit('data', this._packer.packIDAT(compressedData));\n  }.bind(this));\n\n  this._deflate.on('end', function () {\n    this.emit('data', this._packer.packIEND());\n    this.emit('end');\n  }.bind(this));\n\n  this._deflate.end(filteredData);\n};","map":null,"metadata":{},"sourceType":"script"}