{"ast":null,"code":"var _jsxFileName = \"/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/src/components/PreviewWindow.js\";\nimport gifshot from '../lib/gifshot.js';\nimport React from 'react';\nimport { Box, Grid, Button } from 'grommet';\nimport gifFrames from 'gif-frames';\nimport { connect } from 'react-redux';\nimport { object } from 'prop-types';\n\nconst CreatePreviewGIF = timeline => {\n  var frames = [];\n\n  for (let i = 0; i < timeline.length; i++) {\n    let url = URL.createObjectURL(timeline[i].shot);\n    gifFrames({\n      url,\n      frames: 'all',\n      outputType: 'png'\n    }).then(frameData => {\n      var newFrames = frameData.map(item => item.getImage());\n      console.log(newFrames);\n      frames.concat(newFrames);\n    });\n  }\n\n  console.log(frames);\n  var urls = frames.map(image => URL.createObjectURL(image));\n  console.log(urls);\n  let result;\n  gifshot.createGIF({\n    \"images\": urls\n  }, function (obj) {\n    if (!obj.error) {\n      console.log(\"No error\");\n      result = obj.image;\n    }\n  });\n  return urls[0];\n};\n\nexport const PreviewWindowComponent = ({\n  timeline\n}) => {\n  var gifURL = timeline.length > 0 ? URL.createObjectURL(timeline[0].shot) : \"\";\n\n  if (timeline.length > 0) {\n    let gif = CreatePreviewGIF(timeline);\n    gifURL = gif; //URL.createObjectURL(gif)\n  }\n\n  return React.createElement(Box, {\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    gap: \"small\",\n    background: \"dark-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Box, {\n    width: \"medium\",\n    height: \"medium\",\n    background: \"dark-3\",\n    style: {\n      backgroundImage: \"url(\".concat(gifURL, \")\"),\n      backgroundSize: 'cover',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Box, {\n    round: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    fill: true,\n    areas: [{\n      name: \"back\",\n      start: [0, 0],\n      end: [0, 0]\n    }, {\n      name: \"play\",\n      start: [1, 0],\n      end: [1, 0]\n    }, {\n      name: \"toEnd\",\n      start: [2, 0],\n      end: [2, 0]\n    }],\n    columns: [\"flex\", \"flex\", \"flex\"],\n    rows: [\"flex\"],\n    gap: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Button, {\n    gridArea: \"back\",\n    label: \"|<\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(Button, {\n    gridArea: \"play\",\n    label: \">\",\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Button, {\n    gridArea: \"toEnd\",\n    label: \">|\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  timeline: state.timeline\n});\n\nconst mapDispatchToProps = dispathc => ({});\n\nexport const PreviewWindow = connect(mapStateToProps, mapDispatchToProps)(PreviewWindowComponent);","map":{"version":3,"sources":["/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/src/components/PreviewWindow.js"],"names":["gifshot","React","Box","Grid","Button","gifFrames","connect","object","CreatePreviewGIF","timeline","frames","i","length","url","URL","createObjectURL","shot","outputType","then","frameData","newFrames","map","item","getImage","console","log","concat","urls","image","result","createGIF","obj","error","PreviewWindowComponent","gifURL","gif","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","name","start","end","mapStateToProps","state","mapDispatchToProps","dispathc","PreviewWindow"],"mappings":"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","sourcesContent":["import gifshot from '../lib/gifshot.js'\nimport React from 'react'\nimport { Box, Grid, Button } from 'grommet'\nimport gifFrames from 'gif-frames'\nimport { connect } from 'react-redux'\nimport { object } from 'prop-types'\n\nconst CreatePreviewGIF = (timeline) => {\n    var frames = []\n    for(let i = 0; i < timeline.length; i++) {\n        let url = URL.createObjectURL(timeline[i].shot)\n        gifFrames({url, frames: 'all', outputType: 'png'}).then((frameData) => {\n\n            var newFrames = frameData.map((item) => item.getImage())\n            console.log(newFrames)\n            frames.concat(newFrames)\n        })\n    }\n    console.log(frames)\n    var urls = frames.map((image) => URL.createObjectURL(image))\n    console.log(urls)\n\n    let result\n    gifshot.createGIF({\n        \"images\" : urls\n    }, function(obj){\n        if(!obj.error) {\n            console.log(\"No error\")\n            result = obj.image\n        }\n    })\n\n    return urls[0]\n}\n\nexport const PreviewWindowComponent = ({timeline}) => {\n\n\n    var gifURL = timeline.length > 0 ? URL.createObjectURL(timeline[0].shot) : \"\"\n    if(timeline.length > 0) {\n        let gif = CreatePreviewGIF(timeline)\n        gifURL = gif //URL.createObjectURL(gif)\n    }\n    return (\n        <Box\n            fill\n            align=\"center\"\n            justify=\"center\"\n            gap=\"small\"\n            background=\"dark-1\"\n        >\n            <Box\n                width=\"medium\"\n                height=\"medium\"\n                background=\"dark-3\"\n                style={{backgroundImage:`url(${gifURL})`, backgroundSize:'cover', backgroundRepeat: 'no-repeat', backgroundPosition: 'center'}}\n            >\n\n            </Box>\n            <Box\n                round\n            >\n                <Grid\n                    fill\n                    areas={\n                        [\n                            { name: \"back\", start: [0, 0], end: [0,0] },\n                            { name: \"play\", start: [1, 0], end: [1,0] },\n                            { name: \"toEnd\", start: [2, 0], end: [2,0] },\n                        ]\n                    }\n                    columns={[\"flex\", \"flex\", \"flex\"]}\n                    rows={[\"flex\"]}\n                    gap=\"small\"\n                >\n                    <Button gridArea=\"back\" label=\"|<\"/>\n                    <Button gridArea=\"play\" label=\">\" primary/>\n                    <Button gridArea=\"toEnd\" label=\">|\"/>\n\n                </Grid>\n            </Box>\n        </Box>\n    )\n}\n\nconst mapStateToProps = state => ({\n        timeline: state.timeline\n    })\n\nconst mapDispatchToProps = dispathc => ({\n\n    })\n\nexport const PreviewWindow = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PreviewWindowComponent)"]},"metadata":{},"sourceType":"module"}