{"ast":null,"code":"/* NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n * See \"Kohonen neural networks for optimal colour quantization\"\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n * for a discussion of the algorithm.\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\n * in this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons who receive\n * copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * (JavaScript port 2012 by Johan Nordberg)\n */\nvar ncycles = 100; // number of learning cycles\n\nvar netsize = 256; // number of colors used\n\nvar maxnetpos = netsize - 1; // defs for freq and bias\n\nvar netbiasshift = 4; // bias for colour values\n\nvar intbiasshift = 16; // bias for fractions\n\nvar intbias = 1 << intbiasshift;\nvar gammashift = 10;\nvar gamma = 1 << gammashift;\nvar betashift = 10;\nvar beta = intbias >> betashift;\n/* beta = 1/1024 */\n\nvar betagamma = intbias << gammashift - betashift; // defs for decreasing radius factor\n\nvar initrad = netsize >> 3; // for 256 cols, radius starts\n\nvar radiusbiasshift = 6; // at 32.0 biased by 6 bits\n\nvar radiusbias = 1 << radiusbiasshift;\nvar initradius = initrad * radiusbias; //and decreases by a\n\nvar radiusdec = 30; // factor of 1/30 each cycle\n// defs for decreasing alpha factor\n\nvar alphabiasshift = 10; // alpha starts at 1.0\n\nvar initalpha = 1 << alphabiasshift;\nvar alphadec; // biased by 10 bits\n\n/* radbias and alpharadbias used for radpower calculation */\n\nvar radbiasshift = 8;\nvar radbias = 1 << radbiasshift;\nvar alpharadbshift = alphabiasshift + radbiasshift;\nvar alpharadbias = 1 << alpharadbshift; // four primes near 500 - assume no image has a length so large that it is\n// divisible by all four primes\n\nvar prime1 = 499;\nvar prime2 = 491;\nvar prime3 = 487;\nvar prime4 = 503;\nvar minpicturebytes = 3 * prime4;\n/*\n  Constructor: NeuQuant\n\n  Arguments:\n\n  pixels - array of pixels in RGB format\n  samplefac - sampling factor 1 to 30 where lower is better quality\n\n  >\n  > pixels = [r, g, b, r, g, b, r, g, b, ..]\n  >\n*/\n\nfunction NeuQuant(pixels, samplefac) {\n  var network; // int[netsize][4]\n\n  var netindex; // for network lookup - really 256\n  // bias and freq arrays for learning\n\n  var bias;\n  var freq;\n  var radpower;\n  /*\n    Private Method: init\n     sets up arrays\n  */\n\n  function init() {\n    network = [];\n    netindex = new Int32Array(256);\n    bias = new Int32Array(netsize);\n    freq = new Int32Array(netsize);\n    radpower = new Int32Array(netsize >> 3);\n    var i, v;\n\n    for (i = 0; i < netsize; i++) {\n      v = (i << netbiasshift + 8) / netsize;\n      network[i] = new Float64Array([v, v, v, 0]); //network[i] = [v, v, v, 0]\n\n      freq[i] = intbias / netsize;\n      bias[i] = 0;\n    }\n  }\n  /*\n    Private Method: unbiasnet\n     unbiases network to give byte values 0..255 and record position i to prepare for sort\n  */\n\n\n  function unbiasnet() {\n    for (var i = 0; i < netsize; i++) {\n      network[i][0] >>= netbiasshift;\n      network[i][1] >>= netbiasshift;\n      network[i][2] >>= netbiasshift;\n      network[i][3] = i; // record color number\n    }\n  }\n  /*\n    Private Method: altersingle\n     moves neuron *i* towards biased (b,g,r) by factor *alpha*\n  */\n\n\n  function altersingle(alpha, i, b, g, r) {\n    network[i][0] -= alpha * (network[i][0] - b) / initalpha;\n    network[i][1] -= alpha * (network[i][1] - g) / initalpha;\n    network[i][2] -= alpha * (network[i][2] - r) / initalpha;\n  }\n  /*\n    Private Method: alterneigh\n     moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\n  */\n\n\n  function alterneigh(radius, i, b, g, r) {\n    var lo = Math.abs(i - radius);\n    var hi = Math.min(i + radius, netsize);\n    var j = i + 1;\n    var k = i - 1;\n    var m = 1;\n    var p, a;\n\n    while (j < hi || k > lo) {\n      a = radpower[m++];\n\n      if (j < hi) {\n        p = network[j++];\n        p[0] -= a * (p[0] - b) / alpharadbias;\n        p[1] -= a * (p[1] - g) / alpharadbias;\n        p[2] -= a * (p[2] - r) / alpharadbias;\n      }\n\n      if (k > lo) {\n        p = network[k--];\n        p[0] -= a * (p[0] - b) / alpharadbias;\n        p[1] -= a * (p[1] - g) / alpharadbias;\n        p[2] -= a * (p[2] - r) / alpharadbias;\n      }\n    }\n  }\n  /*\n    Private Method: contest\n     searches for biased BGR values\n  */\n\n\n  function contest(b, g, r) {\n    /*\n      finds closest neuron (min dist) and updates freq\n      finds best neuron (min dist-bias) and returns position\n      for frequently chosen neurons, freq[i] is high and bias[i] is negative\n      bias[i] = gamma * ((1 / netsize) - freq[i])\n    */\n    var bestd = ~(1 << 31);\n    var bestbiasd = bestd;\n    var bestpos = -1;\n    var bestbiaspos = bestpos;\n    var i, n, dist, biasdist, betafreq;\n\n    for (i = 0; i < netsize; i++) {\n      n = network[i];\n      dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\n\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      biasdist = dist - (bias[i] >> intbiasshift - netbiasshift);\n\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n\n      betafreq = freq[i] >> betashift;\n      freq[i] -= betafreq;\n      bias[i] += betafreq << gammashift;\n    }\n\n    freq[bestpos] += beta;\n    bias[bestpos] -= betagamma;\n    return bestbiaspos;\n  }\n  /*\n    Private Method: inxbuild\n     sorts network and builds netindex[0..255]\n  */\n\n\n  function inxbuild() {\n    var i,\n        j,\n        p,\n        q,\n        smallpos,\n        smallval,\n        previouscol = 0,\n        startpos = 0;\n\n    for (i = 0; i < netsize; i++) {\n      p = network[i];\n      smallpos = i;\n      smallval = p[1]; // index on g\n      // find smallest in i..netsize-1\n\n      for (j = i + 1; j < netsize; j++) {\n        q = network[j];\n\n        if (q[1] < smallval) {\n          // index on g\n          smallpos = j;\n          smallval = q[1]; // index on g\n        }\n      }\n\n      q = network[smallpos]; // swap p (i) and q (smallpos) entries\n\n      if (i != smallpos) {\n        j = q[0];\n        q[0] = p[0];\n        p[0] = j;\n        j = q[1];\n        q[1] = p[1];\n        p[1] = j;\n        j = q[2];\n        q[2] = p[2];\n        p[2] = j;\n        j = q[3];\n        q[3] = p[3];\n        p[3] = j;\n      } // smallval entry is now in position i\n\n\n      if (smallval != previouscol) {\n        netindex[previouscol] = startpos + i >> 1;\n\n        for (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\n\n        previouscol = smallval;\n        startpos = i;\n      }\n    }\n\n    netindex[previouscol] = startpos + maxnetpos >> 1;\n\n    for (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos; // really 256\n\n  }\n  /*\n    Private Method: inxsearch\n     searches for BGR values 0..255 and returns a color index\n  */\n\n\n  function inxsearch(b, g, r) {\n    var a, p, dist;\n    var bestd = 1000; // biggest possible dist is 256*3\n\n    var best = -1;\n    var i = netindex[g]; // index on g\n\n    var j = i - 1; // start at netindex[g] and work outwards\n\n    while (i < netsize || j >= 0) {\n      if (i < netsize) {\n        p = network[i];\n        dist = p[1] - g; // inx key\n\n        if (dist >= bestd) i = netsize; // stop iter\n        else {\n            i++;\n            if (dist < 0) dist = -dist;\n            a = p[0] - b;\n            if (a < 0) a = -a;\n            dist += a;\n\n            if (dist < bestd) {\n              a = p[2] - r;\n              if (a < 0) a = -a;\n              dist += a;\n\n              if (dist < bestd) {\n                bestd = dist;\n                best = p[3];\n              }\n            }\n          }\n      }\n\n      if (j >= 0) {\n        p = network[j];\n        dist = g - p[1]; // inx key - reverse dif\n\n        if (dist >= bestd) j = -1; // stop iter\n        else {\n            j--;\n            if (dist < 0) dist = -dist;\n            a = p[0] - b;\n            if (a < 0) a = -a;\n            dist += a;\n\n            if (dist < bestd) {\n              a = p[2] - r;\n              if (a < 0) a = -a;\n              dist += a;\n\n              if (dist < bestd) {\n                bestd = dist;\n                best = p[3];\n              }\n            }\n          }\n      }\n    }\n\n    return best;\n  }\n  /*\n    Private Method: learn\n     \"Main Learning Loop\"\n  */\n\n\n  function learn() {\n    var i;\n    var lengthcount = pixels.length;\n    var alphadec = 30 + (samplefac - 1) / 3;\n    var samplepixels = lengthcount / (3 * samplefac);\n    var delta = ~~(samplepixels / ncycles);\n    var alpha = initalpha;\n    var radius = initradius;\n    var rad = radius >> radiusbiasshift;\n    if (rad <= 1) rad = 0;\n\n    for (i = 0; i < rad; i++) radpower[i] = alpha * ((rad * rad - i * i) * radbias / (rad * rad));\n\n    var step;\n\n    if (lengthcount < minpicturebytes) {\n      samplefac = 1;\n      step = 3;\n    } else if (lengthcount % prime1 !== 0) {\n      step = 3 * prime1;\n    } else if (lengthcount % prime2 !== 0) {\n      step = 3 * prime2;\n    } else if (lengthcount % prime3 !== 0) {\n      step = 3 * prime3;\n    } else {\n      step = 3 * prime4;\n    }\n\n    var b, g, r, j;\n    var pix = 0; // current pixel\n\n    i = 0;\n\n    while (i < samplepixels) {\n      b = (pixels[pix] & 0xff) << netbiasshift;\n      g = (pixels[pix + 1] & 0xff) << netbiasshift;\n      r = (pixels[pix + 2] & 0xff) << netbiasshift;\n      j = contest(b, g, r);\n      altersingle(alpha, j, b, g, r);\n      if (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours\n\n      pix += step;\n      if (pix >= lengthcount) pix -= lengthcount;\n      i++;\n      if (delta === 0) delta = 1;\n\n      if (i % delta === 0) {\n        alpha -= alpha / alphadec;\n        radius -= radius / radiusdec;\n        rad = radius >> radiusbiasshift;\n        if (rad <= 1) rad = 0;\n\n        for (j = 0; j < rad; j++) radpower[j] = alpha * ((rad * rad - j * j) * radbias / (rad * rad));\n      }\n    }\n  }\n  /*\n    Method: buildColormap\n     1. initializes network\n    2. trains it\n    3. removes misconceptions\n    4. builds colorindex\n  */\n\n\n  function buildColormap() {\n    init();\n    learn();\n    unbiasnet();\n    inxbuild();\n  }\n\n  this.buildColormap = buildColormap;\n  /*\n    Method: getColormap\n     builds colormap from the index\n     returns array in the format:\n     >\n    > [r, g, b, r, g, b, r, g, b, ..]\n    >\n  */\n\n  function getColormap() {\n    var map = [];\n    var index = [];\n\n    for (var i = 0; i < netsize; i++) index[network[i][3]] = i;\n\n    var k = 0;\n\n    for (var l = 0; l < netsize; l++) {\n      var j = index[l];\n      map[k++] = network[j][0];\n      map[k++] = network[j][1];\n      map[k++] = network[j][2];\n    }\n\n    return map;\n  }\n\n  this.getColormap = getColormap;\n  /*\n    Method: lookupRGB\n     looks for the closest *r*, *g*, *b* color in the map and\n    returns its index\n  */\n\n  this.lookupRGB = inxsearch;\n}\n\nmodule.exports = NeuQuant;","map":null,"metadata":{},"sourceType":"script"}