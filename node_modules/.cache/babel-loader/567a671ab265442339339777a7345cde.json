{"ast":null,"code":"import _slicedToArray from \"/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/src/components/ProjectExplorer.js\";\nimport React, { useCallback } from 'react';\nimport { Grid, Box, Text, InfiniteScroll, Heading, ThemeContext } from 'grommet';\nimport { useDrag } from 'react-dnd';\nimport { useDropzone } from 'react-dropzone';\nimport { connect } from 'react-redux';\nimport Action from '../store/actions';\nimport '../style/Main.css';\n\nconst ImportFileHint = ({}) => {\n  return React.createElement(Box, {\n    round: \"small\",\n    border: {\n      \"color\": \"white\",\n      \"size\": \"small\",\n      \"style\": \"dashed\"\n    },\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    className: \"boxHover\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Drag and Drop GIFs here..\"));\n};\n\nconst ExplorerFileDraggable = ({\n  id,\n  img\n}) => {\n  const _useDrag = useDrag({\n    item: {\n      type: \"DRAG\",\n      file: img\n    }\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        dragRef = _useDrag2[1];\n\n  return React.createElement(Box, {\n    background: \"black\",\n    round: \"xsmall\",\n    pad: \"medium\",\n    height: \"7.2em\",\n    flex: false,\n    align: \"center\",\n    justify: \"center\",\n    ref: dragRef,\n    style: {\n      backgroundImage: \"url(\".concat(img.url, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nconst ExplorerFile = ({\n  id\n}) => {\n  return React.createElement(Box, {\n    background: \"black\",\n    round: \"xsmall\",\n    pad: \"medium\",\n    height: \"7.2em\",\n    flex: false,\n    align: \"center\",\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"File \", id));\n};\n\nconst ProjectExplorerComponent = ({\n  importedFiles,\n  onImportFiles\n}) => {\n  const onDrop = useCallback(acceptedFiles => {\n    var filteredFiles = [];\n    acceptedFiles.forEach(element => {\n      if (element.type === \"image/gif\") {\n        filteredFiles.push(element);\n      } else {\n        console.log(\"unsupported file \");\n      }\n    });\n    onImportFiles(filteredFiles);\n  }, []);\n\n  const _useDropzone = useDropzone({\n    onDrop\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n\n  return React.createElement(Box, Object.assign({\n    fill: true,\n    overflow: \"auto\",\n    pad: \"small\",\n    background: \"dark-1\"\n  }, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), importedFiles.length != 0 ? null : React.createElement(ImportFileHint, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    columns: \"small\",\n    rows: \"flex\",\n    gap: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(InfiniteScroll, {\n    items: importedFiles,\n    step: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, x => {\n    console.log(x);\n    return React.createElement(ExplorerFileDraggable, {\n      id: x,\n      img: x[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n  })));\n};\n\nconst projectExplorerMapStateToProps = state => {\n  console.log(state.currentProject);\n  return {\n    importedFiles: state.project.currentProject.importedFiles\n  };\n};\n\nconst projectExplorerMapDispatchToProps = dispatch => ({\n  onImportFiles(files) {\n    dispatch(Action.importFiles(files));\n  }\n\n});\n\nexport const ProjectExplorer = connect(projectExplorerMapStateToProps, projectExplorerMapDispatchToProps)(ProjectExplorerComponent);","map":{"version":3,"sources":["/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/src/components/ProjectExplorer.js"],"names":["React","useCallback","Grid","Box","Text","InfiniteScroll","Heading","ThemeContext","useDrag","useDropzone","connect","Action","ImportFileHint","ExplorerFileDraggable","id","img","item","type","file","dragRef","backgroundImage","url","ExplorerFile","ProjectExplorerComponent","importedFiles","onImportFiles","onDrop","acceptedFiles","filteredFiles","forEach","element","push","console","log","getRootProps","getInputProps","isDragActive","length","x","projectExplorerMapStateToProps","state","currentProject","project","projectExplorerMapDispatchToProps","dispatch","files","importFiles","ProjectExplorer"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react';\nimport {\n    Grid,\n    Box,\n    Text,\n    InfiniteScroll,\n    Heading,\n    ThemeContext\n} from 'grommet'\nimport {useDrag} from 'react-dnd'\nimport { useDropzone } from 'react-dropzone'\nimport { connect } from 'react-redux'\nimport Action from '../store/actions'\nimport '../style/Main.css'\n\nconst ImportFileHint = ({}) => {\n    return (\n        <Box\n            round={\"small\"}\n            border={{\"color\": \"white\", \"size\": \"small\", \"style\":\"dashed\",}}\n            fill\n            align=\"center\"\n            justify=\"center\"\n            className=\"boxHover\"\n        >\n            <Heading>\n                Drag and Drop GIFs here..\n            </Heading>\n        </Box>\n    )\n}\n\nconst ExplorerFileDraggable = ({id, img}) => {\n\n    const [, dragRef] = useDrag({\n        item: { type: \"DRAG\", file: img}\n    })\n\n    return (\n        <Box\n            background=\"black\"\n            round=\"xsmall\"\n            pad=\"medium\"\n            height=\"7.2em\"\n            flex={false}\n            align=\"center\"\n            justify=\"center\"\n            ref={dragRef}\n            style={{backgroundImage: `url(${img.url})`}}\n        >\n            <Text>\n            </Text>\n        </Box>\n    )\n}\nconst ExplorerFile = ({id}) => {\n    return (\n        <Box\n            background=\"black\"\n            round=\"xsmall\"\n            pad=\"medium\"\n            height=\"7.2em\"\n            flex={false}\n            align=\"center\"\n            justify=\"center\"\n        >\n            <Text>\n                File {id}\n            </Text>\n        </Box>\n    )\n}\nconst ProjectExplorerComponent = ({importedFiles, onImportFiles}) => {\n    const onDrop = useCallback(acceptedFiles => {\n        var filteredFiles = []\n\n        acceptedFiles.forEach(element => {\n            if(element.type === \"image/gif\") {\n                filteredFiles.push(element)\n            } else {\n                console.log(\"unsupported file \")\n            }\n        });\n\n        onImportFiles(filteredFiles)\n    }, [])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <Box\n            fill\n            overflow=\"auto\"\n            pad=\"small\"\n            background=\"dark-1\"\n            {...getRootProps()}\n        >\n            <input \n            {...getInputProps()} />\n            {importedFiles.length != 0 ? null :\n                <ImportFileHint/>\n            }\n            <Grid columns=\"small\" rows=\"flex\" gap=\"small\">\n                <InfiniteScroll items={importedFiles} step={3}>\n                    {\n                        (x) => {\n                            console.log(x)\n                            return (<ExplorerFileDraggable \n                                        id={x}\n                                        img={x[0]}\n                                    />)\n                        }\n\n                    }\n                </InfiniteScroll>\n            </Grid>\n        </Box>\n    )\n}\nconst projectExplorerMapStateToProps = state => {\n    console.log(state.currentProject)\n    return({\n        importedFiles: state.project.currentProject.importedFiles\n    })\n}\n\nconst projectExplorerMapDispatchToProps = dispatch => ({\n        onImportFiles(files){ dispatch(Action.importFiles(files))}\n    })\n\nexport const ProjectExplorer = connect(\n    projectExplorerMapStateToProps,\n    projectExplorerMapDispatchToProps\n)(ProjectExplorerComponent)"]},"metadata":{},"sourceType":"module"}