{"ast":null,"code":"import _slicedToArray from \"/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/src/components/Timeline.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Box, Grid, InfiniteScroll, Text } from 'grommet';\nimport { useDrop } from 'react-dnd';\nimport Action from '../store/actions';\n\nconst TimelineShot = ({\n  id,\n  file\n}) => {\n  const _useDrop = useDrop({\n    accept: \"DRAG\",\n\n    drop(data) {\n      console.log(data);\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        drop = _useDrop2[1];\n\n  return React.createElement(\"li\", {\n    key: id,\n    style: {\n      float: \"left\",\n      display: \"inline-block\"\n    },\n    ref: drop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Box, {\n    height: \"small\",\n    width: \"medium\",\n    background: \"black\",\n    round: \"xsmall\",\n    align: \"center\",\n    justify: \"center\",\n    style: {\n      backgroundImage: \"url(\".concat(file.url, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }));\n};\n\nconst TimelineSeparator = ({\n  id,\n  onInsertShot\n}) => {\n  const _useDrop3 = useDrop({\n    accept: \"DRAG\",\n\n    drop(data) {\n      onInsertShot(id, data.file);\n      console.log(data);\n    }\n\n  }),\n        _useDrop4 = _slicedToArray(_useDrop3, 2),\n        file = _useDrop4[0].file,\n        drop = _useDrop4[1];\n\n  return React.createElement(\"li\", {\n    key: id,\n    style: {\n      float: \"left\",\n      display: \"inline-block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Box, {\n    width: \"2.5em\",\n    height: \"small\",\n    flex: false,\n    justify: \"center\",\n    align: \"center\",\n    ref: drop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Box, {\n    width: \"0.6em\",\n    height: \"4em\",\n    background: \"gray\",\n    round: true,\n    style: {\n      float: \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })));\n};\n\nexport const TimelineComponent = ({\n  timeline,\n  onInsertShot\n}) => {\n  var count = 0;\n  return (//<Box\n    //    fill\n    //    overflow=\"hidden\"\n    //    pad=\"medium\"\n    //    direction=\"row-responsive\"\n    //>\n    React.createElement(\"ul\", {\n      style: {\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        listStyle: \"None\",\n        whiteSpace: \"nowrap\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, timeline.map(x => {\n      return [React.createElement(TimelineSeparator, {\n        id: count++,\n        onInsertShot: onInsertShot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(TimelineShot, {\n        id: count,\n        file: x.shot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })];\n    }), React.createElement(TimelineSeparator, {\n      id: count,\n      onInsertShot: onInsertShot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })) //</Box>\n\n  );\n};\n\nconst timelineMapStateToProps = state => ({\n  timeline: state.timeline\n});\n\nconst timelineMapDispatchToProps = dispatch => ({\n  onInsertShot(position, shot) {\n    dispatch(Action.insertShotInTimeline(position, shot));\n  }\n\n});\n\nexport const Timeline = connect(timelineMapStateToProps, timelineMapDispatchToProps)(TimelineComponent);","map":{"version":3,"sources":["/Users/marcseibert/Documents/Development/web/coding-challenge-react/gifmaker/src/components/Timeline.js"],"names":["React","connect","Box","Grid","InfiniteScroll","Text","useDrop","Action","TimelineShot","id","file","accept","drop","data","console","log","float","display","backgroundImage","url","TimelineSeparator","onInsertShot","TimelineComponent","timeline","count","overflowX","overflowY","listStyle","whiteSpace","map","x","shot","timelineMapStateToProps","state","timelineMapDispatchToProps","dispatch","position","insertShotInTimeline","Timeline"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {Box, Grid, InfiniteScroll, Text} from 'grommet'\nimport {useDrop} from 'react-dnd'\nimport Action from '../store/actions'\n\nconst TimelineShot = ({id, file}) => {\n\n    const [, drop] = useDrop({\n        accept: \"DRAG\",\n        drop(data){\n            console.log(data)\n        }\n    })\n\n    return (\n        <li key={id} style={{float: \"left\", display: \"inline-block\"}}\n        ref={drop}>\n        <Box\n            height=\"small\"\n            width=\"medium\"\n            background=\"black\"\n            round=\"xsmall\"\n            align=\"center\"\n            justify=\"center\"\n            style={{backgroundImage:`url(${file.url})`}}\n        >\n        </Box>\n            \n        </li>\n    )\n}\n\nconst TimelineSeparator = ({id, onInsertShot}) => {\n    const [{file}, drop] = useDrop({\n        accept: \"DRAG\",\n        drop(data){\n            onInsertShot(id, data.file)\n            console.log(data)\n        }\n    })\n\n    return (\n        <li key={id} style={{float:\"left\", display: \"inline-block\"}}>\n            <Box\n                width=\"2.5em\"\n                height=\"small\"\n                flex={false}\n                justify=\"center\"\n                align=\"center\"\n                ref={drop}\n            >\n                <Box \n                    width=\"0.6em\"\n                    height=\"4em\"\n                    background=\"gray\"\n                    round\n                    style={{float:\"none\"}}\n                >\n                </Box>\n            </Box>\n        </li>\n    )\n}\n\nexport const TimelineComponent = ({timeline, onInsertShot}) => {\n    var count = 0\n\n    return (\n        //<Box\n        //    fill\n        //    overflow=\"hidden\"\n        //    pad=\"medium\"\n        //    direction=\"row-responsive\"\n        //>\n            <ul style={{ overflowX: \"hidden\", overflowY: \"hidden\", listStyle: \"None\", whiteSpace: \"nowrap\"}}>\n                {  \n                    timeline.map(\n                        (x) => {\n                            return [\n                            <TimelineSeparator id={count++} onInsertShot={onInsertShot}/>,\n                            <TimelineShot id={count} file={x.shot}/>\n                            ]\n                        }\n\n                    )\n                }\n                <TimelineSeparator id={count} onInsertShot={onInsertShot}/>\n            </ul>\n        //</Box>\n    )\n}\n\nconst timelineMapStateToProps = state => ({\n    timeline: state.timeline\n})\n\nconst timelineMapDispatchToProps = dispatch => ({\n    onInsertShot(position, shot) {\n        dispatch(Action.insertShotInTimeline(position, shot))\n    }   \n})\n\nexport const Timeline = connect(\n    timelineMapStateToProps,\n    timelineMapDispatchToProps\n)(TimelineComponent)"]},"metadata":{},"sourceType":"module"}