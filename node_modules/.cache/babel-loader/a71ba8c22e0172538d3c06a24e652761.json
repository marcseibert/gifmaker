{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { Header } from './Header';\nimport { Footer } from './Footer';\nimport { Body } from './Body';\nimport { GroupedBody } from './GroupedBody';\nimport { buildState } from './buildState';\nimport { StyledDataTable } from './StyledDataTable';\nvar contexts = ['header', 'body', 'footer'];\n\nvar normalizeProp = function normalizeProp(prop, context) {\n  if (prop) {\n    if (prop[context]) return prop[context];\n    if (contexts.some(function (c) {\n      return prop[c];\n    })) return undefined;\n    return prop;\n  }\n\n  return undefined;\n};\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(DataTable, _Component);\n\n  function DataTable() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onFiltering\", function (property) {\n      _this.setState({\n        filtering: property\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilter\", function (property, value) {\n      /* eslint-disable-next-line react/prop-types */\n      var onSearch = _this.props.onSearch;\n      var filters = _this.state.filters;\n\n      var nextFilters = _extends({}, filters);\n\n      nextFilters[property] = value;\n\n      _this.setState({\n        filters: nextFilters\n      }); // Let caller know about search, if interested\n\n\n      if (onSearch) {\n        onSearch(nextFilters);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSort\", function (property) {\n      return function () {\n        var sort = _this.state.sort;\n        var ascending = sort && property === sort.property ? !sort.ascending : true;\n\n        _this.setState({\n          sort: {\n            property: property,\n            ascending: ascending\n          }\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleGroup\", function (groupValue) {\n      return function () {\n        var groupState = _this.state.groupState;\n        var groupBy = _this.props.groupBy;\n\n        var nextGroupState = _extends({}, groupState);\n\n        nextGroupState[groupValue] = _extends({}, nextGroupState[groupValue], {\n          expanded: !nextGroupState[groupValue].expanded\n        });\n\n        _this.setState({\n          groupState: nextGroupState\n        });\n\n        if (groupBy.onExpand) {\n          var expandedKeys = Object.keys(nextGroupState).filter(function (k) {\n            return nextGroupState[k].expanded;\n          });\n          groupBy.onExpand(expandedKeys);\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleGroups\", function () {\n      var groupState = _this.state.groupState;\n      var groupBy = _this.props.groupBy;\n      var expanded = Object.keys(groupState).filter(function (k) {\n        return !groupState[k].expanded;\n      }).length === 0;\n      var nextGroupState = {};\n      Object.keys(groupState).forEach(function (k) {\n        nextGroupState[k] = _extends({}, groupState[k], {\n          expanded: !expanded\n        });\n      });\n\n      _this.setState({\n        groupState: nextGroupState\n      });\n\n      if (groupBy.onExpand) {\n        var expandedKeys = Object.keys(nextGroupState).filter(function (k) {\n          return nextGroupState[k].expanded;\n        });\n        groupBy.onExpand(expandedKeys);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function (property) {\n      return function (width) {\n        var widths = _this.state.widths;\n\n        var nextWidths = _extends({}, widths || {});\n\n        nextWidths[property] = width;\n\n        _this.setState({\n          widths: nextWidths\n        });\n      };\n    });\n\n    return _this;\n  }\n\n  DataTable.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    return buildState(nextProps, prevState);\n  };\n\n  var _proto = DataTable.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        background = _this$props.background,\n        border = _this$props.border,\n        columns = _this$props.columns,\n        propsData = _this$props.data,\n        groupBy = _this$props.groupBy,\n        onMore = _this$props.onMore,\n        pad = _this$props.pad,\n        resizeable = _this$props.resizeable,\n        rowProps = _this$props.rowProps,\n        size = _this$props.size,\n        sortable = _this$props.sortable,\n        step = _this$props.step,\n        onClickRow = _this$props.onClickRow,\n        onSearch = _this$props.onSearch,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"background\", \"border\", \"columns\", \"data\", \"groupBy\", \"onMore\", \"pad\", \"resizeable\", \"rowProps\", \"size\", \"sortable\", \"step\", \"onClickRow\", \"onSearch\"]);\n\n    var _this$state = this.state,\n        data = _this$state.data,\n        filtering = _this$state.filtering,\n        filters = _this$state.filters,\n        footerValues = _this$state.footerValues,\n        groups = _this$state.groups,\n        groupState = _this$state.groupState,\n        primaryProperty = _this$state.primaryProperty,\n        showFooter = _this$state.showFooter,\n        sort = _this$state.sort,\n        widths = _this$state.widths;\n\n    if (size && resizeable) {\n      console.warn('DataTable cannot combine \"size\" and \"resizeble\".');\n    }\n\n    return React.createElement(StyledDataTable, rest, React.createElement(Header, {\n      background: normalizeProp(background, 'header'),\n      border: normalizeProp(border, 'header'),\n      columns: columns,\n      filtering: filtering,\n      filters: filters,\n      groups: groups,\n      groupState: groupState,\n      pad: normalizeProp(pad, 'header'),\n      size: size,\n      sort: sort,\n      widths: widths,\n      onFiltering: this.onFiltering,\n      onFilter: this.onFilter,\n      onResize: resizeable ? this.onResize : undefined,\n      onSort: sortable ? this.onSort : undefined,\n      onToggle: this.onToggleGroups\n    }), groups ? React.createElement(GroupedBody, {\n      background: normalizeProp(background, 'body'),\n      border: normalizeProp(border, 'body'),\n      columns: columns,\n      groupBy: groupBy.property ? groupBy.property : groupBy,\n      groups: groups,\n      groupState: groupState,\n      pad: normalizeProp(pad, 'body'),\n      primaryProperty: primaryProperty,\n      onToggle: this.onToggleGroup\n    }) : React.createElement(Body, {\n      background: normalizeProp(background, 'body'),\n      border: normalizeProp(border, 'body'),\n      columns: columns,\n      data: data,\n      onMore: onMore,\n      onClickRow: onClickRow,\n      pad: normalizeProp(pad, 'body'),\n      primaryProperty: primaryProperty,\n      rowProps: rowProps,\n      size: size,\n      step: step\n    }), showFooter && React.createElement(Footer, {\n      background: normalizeProp(background, 'footer'),\n      border: normalizeProp(border, 'footer'),\n      columns: columns,\n      footerValues: footerValues,\n      groups: groups,\n      pad: normalizeProp(pad, 'footer'),\n      primaryProperty: primaryProperty,\n      size: size\n    }));\n  };\n\n  return DataTable;\n}(Component);\n\n_defineProperty(DataTable, \"defaultProps\", {\n  columns: [],\n  data: [],\n  step: 50\n});\n\nvar DataTableDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  DataTableDoc = require('./doc').doc(DataTable); // eslint-disable-line global-require\n}\n\nvar DataTableWrapper = DataTableDoc || DataTable;\nexport { DataTableWrapper as DataTable };","map":null,"metadata":{},"sourceType":"module"}